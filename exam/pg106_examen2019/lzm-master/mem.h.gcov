        -:    0:Source:mem.h
        -:    0:Graph:lzdata.gcno
        -:    0:Data:lzdata.gcda
        -:    0:Runs:2
        -:    1:#ifndef MEM_H
        -:    2:#define MEM_H
        -:    3:
        -:    4:#define MEM_ACCESS_DIRECT	0
        -:    5:#define MEM_ACCESS_PACKED	0
        -:    6:#define MEM_ACCESS_MEMCPY	1
        -:    7:
        -:    8:#if MEM_ACCESS_DIRECT
        -:    9:
        -:   10:static inline unsigned short
        -:   11:readmem16(const void * const mem)
        -:   12:{
        -:   13:	return *(unsigned short *)mem;
        -:   14:}
        -:   15:
        -:   16:static inline unsigned int
        -:   17:readmem32(const void * const mem)
        -:   18:{
        -:   19:	return *(unsigned int *)mem;
        -:   20:}
        -:   21:
        -:   22:static inline unsigned long
        -:   23:readmem64(const void * const mem)
        -:   24:{
        -:   25:	return *(unsigned long *)mem;
        -:   26:}
        -:   27:
        -:   28:static inline void
        -:   29:writemem16(void * const mem, const unsigned short val)
        -:   30:{
        -:   31:	*(unsigned short *)mem = val;
        -:   32:}
        -:   33:
        -:   34:static inline void
        -:   35:writemem32(void * const mem, const unsigned int val)
        -:   36:{
        -:   37:	*(unsigned int *)mem = val;
        -:   38:}
        -:   39:
        -:   40:static inline void
        -:   41:writemem64(void * const mem, const unsigned long val)
        -:   42:{
        -:   43:	*(unsigned long *)mem = val;
        -:   44:}
        -:   45:
        -:   46:#endif
        -:   47:
        -:   48:#if MEM_ACCESS_PACKED
        -:   49:
        -:   50:union unalign {
        -:   51:	unsigned short u16;
        -:   52:	unsigned int u32;
        -:   53:	unsigned long u64;
        -:   54:} __attribute__((packed));
        -:   55:
        -:   56:static inline unsigned short
        -:   57:readmem16(const void * const mem)
        -:   58:{
        -:   59:	const union unalign * const unalign = mem;
        -:   60:	return unalign->u16;
        -:   61:}
        -:   62:
        -:   63:static inline unsigned int
        -:   64:readmem32(const void * const mem)
        -:   65:{
        -:   66:	const union unalign * const unalign = mem;
        -:   67:	return unalign->u32;
        -:   68:}
        -:   69:
        -:   70:static inline unsigned long
        -:   71:readmem64(const void * const mem)
        -:   72:{
        -:   73:	const union unalign * const unalign = mem;
        -:   74:	return unalign->u64;
        -:   75:}
        -:   76:
        -:   77:static inline void
        -:   78:writemem16(void * const mem, const unsigned short val)
        -:   79:{
        -:   80:	union unalign * const unalign = mem;
        -:   81:	unalign->u16 = val;
        -:   82:}
        -:   83:
        -:   84:static inline void
        -:   85:writemem32(void * const mem, const unsigned int val)
        -:   86:{
        -:   87:	union unalign * const unalign = mem;
        -:   88:	unalign->u32 = val;
        -:   89:}
        -:   90:
        -:   91:static inline void
        -:   92:writemem64(void * const mem, const unsigned long val)
        -:   93:{
        -:   94:	union unalign * const unalign = mem;
        -:   95:	unalign->u64 = val;
        -:   96:}
        -:   97:
        -:   98:#endif
        -:   99:
        -:  100:#if MEM_ACCESS_MEMCPY
        -:  101:
        -:  102:static inline unsigned short
        -:  103:readmem16(const void * const mem)
        -:  104:{
        -:  105:	unsigned short val;
        -:  106:	memcpy(&val, mem, sizeof(val));
        -:  107:	return val;
        -:  108:}
        -:  109:
        -:  110:static inline unsigned int
        -:  111:readmem32(const void * const mem)
        -:  112:{
        -:  113:	unsigned int val;
        -:  114:	memcpy(&val, mem, sizeof(val));
        -:  115:	return val;
        -:  116:}
        -:  117:
        -:  118:static inline unsigned long
        -:  119:readmem64(const void * const mem)
        -:  120:{
        -:  121:	unsigned long val;
        -:  122:	memcpy(&val, mem, sizeof(val));
        -:  123:	return val;
        -:  124:}
        -:  125:
        -:  126:static inline void
        -:  127:writemem16(void * const mem, const unsigned short val)
        -:  128:{
        -:  129:	memcpy(mem, &val, sizeof(val));
        -:  130:}
        -:  131:
        -:  132:static inline void
   278325:  133:writemem32(void * const mem, const unsigned int val)
        -:  134:{
   278325:  135:	memcpy(mem, &val, sizeof(val));
   278325:  136:}
        -:  137:
        -:  138:static inline void
        -:  139:writemem64(void * const mem, const unsigned long val)
        -:  140:{
        -:  141:	memcpy(mem, &val, sizeof(val));
        -:  142:}
        -:  143:
        -:  144:#endif
        -:  145:
        -:  146:static inline void
        -:  147:memcopy16(void * const dst, const void * const src)
        -:  148:{
        -:  149:	writemem16(dst, readmem16(src));
        -:  150:}
        -:  151:
        -:  152:static inline void
        -:  153:memcopy32(void * const dst, const void * const src)
        -:  154:{
        -:  155:	writemem32(dst, readmem32(src));
        -:  156:}
        -:  157:
        -:  158:static inline void
        -:  159:memcopy64(void * const dst, const void * const src)
        -:  160:{
        -:  161:	writemem64(dst, readmem64(src));
        -:  162:}
        -:  163:
        -:  164:#endif
